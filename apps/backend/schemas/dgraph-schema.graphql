#######################
# Input Schema
#######################

enum Color {
	WHITE
	BLUE
	BLACK
	GREEN
	RED
}

enum Rarity {
	MYTHIC
	RARE
	UNCOMMON
	COMMON
}

type MtgCard {
	id: ID!
	nameJa: String @search(by: [regexp])
	nameEn: String! @search(by: [regexp])
	imageUrlJa: String
	imageUrlEn: String!
	colors: [Color]!
	rarity: Rarity!
	setcode: String!
	collectorNumber: String!
}

type Synergy {
	id: ID!
	cards(filter: MtgCardFilter, order: MtgCardOrder, first: Int, offset: Int): [MtgCard!]!
	weight: Float
	explanationJa: String
	explanationEn: String
	cardsAggregate(filter: MtgCardFilter): MtgCardAggregateResult
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 mins 50.52 secs after the 23rd hour of Apr 12th 1985 in UTC.
"""
scalar DateTime

input IntRange{
	min: Int!
	max: Int!
}

input FloatRange{
	min: Float!
	max: Float!
}

input Int64Range{
	min: Int64!
	max: Int64!
}

input DateTimeRange{
	min: DateTime!
	max: DateTime!
}

input StringRange{
	min: String!
	max: String!
}

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
	geo
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

type Point {
	longitude: Float!
	latitude: Float!
}

input PointRef {
	longitude: Float!
	latitude: Float!
}

input NearFilter {
	distance: Float!
	coordinate: PointRef!
}

input PointGeoFilter {
	near: NearFilter
	within: WithinFilter
}

type PointList {
	points: [Point!]!
}

input PointListRef {
	points: [PointRef!]!
}

type Polygon {
	coordinates: [PointList!]!
}

input PolygonRef {
	coordinates: [PointListRef!]!
}

type MultiPolygon {
	polygons: [Polygon!]!
}

input MultiPolygonRef {
	polygons: [PolygonRef!]!
}

input WithinFilter {
	polygon: PolygonRef!
}

input ContainsFilter {
	point: PointRef
	polygon: PolygonRef
}

input IntersectsFilter {
	polygon: PolygonRef
	multiPolygon: MultiPolygonRef
}

input PolygonGeoFilter {
	near: NearFilter
	within: WithinFilter
	contains: ContainsFilter
	intersects: IntersectsFilter
}

input GenerateQueryParams {
	get: Boolean
	query: Boolean
	password: Boolean
	aggregate: Boolean
}

input GenerateMutationParams {
	add: Boolean
	update: Boolean
	delete: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE | FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	password: AuthRule
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete: AuthRule) on OBJECT | INTERFACE
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM
directive @remoteResponse(name: String) on FIELD_DEFINITION
directive @cascade(fields: [String]) on FIELD
directive @lambda on FIELD_DEFINITION
directive @lambdaOnMutate(add: Boolean, update: Boolean, delete: Boolean) on OBJECT | INTERFACE
directive @cacheControl(maxAge: Int!) on QUERY
directive @generate(
	query: GenerateQueryParams,
	mutation: GenerateMutationParams,
	subscription: Boolean) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	in: [Int]
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: IntRange
}

input Int64Filter {
	eq: Int64
	in: [Int64]
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
	between: Int64Range
}

input FloatFilter {
	eq: Float
	in: [Float]
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: FloatRange
}

input DateTimeFilter {
	eq: DateTime
	in: [DateTime]
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
	between: DateTimeRange
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
}

input StringHashFilter {
	eq: String
	in: [String]
}

#######################
# Generated Types
#######################

type AddMtgCardPayload {
	mtgCard(filter: MtgCardFilter, order: MtgCardOrder, first: Int, offset: Int): [MtgCard]
	numUids: Int
}

type AddSynergyPayload {
	synergy(filter: SynergyFilter, order: SynergyOrder, first: Int, offset: Int): [Synergy]
	numUids: Int
}

type DeleteMtgCardPayload {
	mtgCard(filter: MtgCardFilter, order: MtgCardOrder, first: Int, offset: Int): [MtgCard]
	msg: String
	numUids: Int
}

type DeleteSynergyPayload {
	synergy(filter: SynergyFilter, order: SynergyOrder, first: Int, offset: Int): [Synergy]
	msg: String
	numUids: Int
}

type MtgCardAggregateResult {
	count: Int
	nameJaMin: String
	nameJaMax: String
	nameEnMin: String
	nameEnMax: String
	imageUrlJaMin: String
	imageUrlJaMax: String
	imageUrlEnMin: String
	imageUrlEnMax: String
	setcodeMin: String
	setcodeMax: String
	collectorNumberMin: String
	collectorNumberMax: String
}

type SynergyAggregateResult {
	count: Int
	weightMin: Float
	weightMax: Float
	weightSum: Float
	weightAvg: Float
	explanationJaMin: String
	explanationJaMax: String
	explanationEnMin: String
	explanationEnMax: String
}

type UpdateMtgCardPayload {
	mtgCard(filter: MtgCardFilter, order: MtgCardOrder, first: Int, offset: Int): [MtgCard]
	numUids: Int
}

type UpdateSynergyPayload {
	synergy(filter: SynergyFilter, order: SynergyOrder, first: Int, offset: Int): [Synergy]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum MtgCardHasFilter {
	nameJa
	nameEn
	imageUrlJa
	imageUrlEn
	colors
	rarity
	setcode
	collectorNumber
}

enum MtgCardOrderable {
	nameJa
	nameEn
	imageUrlJa
	imageUrlEn
	setcode
	collectorNumber
}

enum SynergyHasFilter {
	cards
	weight
	explanationJa
	explanationEn
}

enum SynergyOrderable {
	weight
	explanationJa
	explanationEn
}

#######################
# Generated Inputs
#######################

input AddMtgCardInput {
	nameJa: String
	nameEn: String!
	imageUrlJa: String
	imageUrlEn: String!
	colors: [Color]!
	rarity: Rarity!
	setcode: String!
	collectorNumber: String!
}

input AddSynergyInput {
	cards: [MtgCardRef!]!
	weight: Float
	explanationJa: String
	explanationEn: String
}

input MtgCardFilter {
	id: [ID!]
	nameJa: StringRegExpFilter
	nameEn: StringRegExpFilter
	has: [MtgCardHasFilter]
	and: [MtgCardFilter]
	or: [MtgCardFilter]
	not: MtgCardFilter
}

input MtgCardOrder {
	asc: MtgCardOrderable
	desc: MtgCardOrderable
	then: MtgCardOrder
}

input MtgCardPatch {
	nameJa: String
	nameEn: String
	imageUrlJa: String
	imageUrlEn: String
	colors: [Color]
	rarity: Rarity
	setcode: String
	collectorNumber: String
}

input MtgCardRef {
	id: ID
	nameJa: String
	nameEn: String
	imageUrlJa: String
	imageUrlEn: String
	colors: [Color]
	rarity: Rarity
	setcode: String
	collectorNumber: String
}

input SynergyFilter {
	id: [ID!]
	has: [SynergyHasFilter]
	and: [SynergyFilter]
	or: [SynergyFilter]
	not: SynergyFilter
}

input SynergyOrder {
	asc: SynergyOrderable
	desc: SynergyOrderable
	then: SynergyOrder
}

input SynergyPatch {
	cards: [MtgCardRef!]
	weight: Float
	explanationJa: String
	explanationEn: String
}

input SynergyRef {
	id: ID
	cards: [MtgCardRef!]
	weight: Float
	explanationJa: String
	explanationEn: String
}

input UpdateMtgCardInput {
	filter: MtgCardFilter!
	set: MtgCardPatch
	remove: MtgCardPatch
}

input UpdateSynergyInput {
	filter: SynergyFilter!
	set: SynergyPatch
	remove: SynergyPatch
}

#######################
# Generated Query
#######################

type Query {
	getMtgCard(id: ID!): MtgCard
	queryMtgCard(filter: MtgCardFilter, order: MtgCardOrder, first: Int, offset: Int): [MtgCard]
	aggregateMtgCard(filter: MtgCardFilter): MtgCardAggregateResult
	getSynergy(id: ID!): Synergy
	querySynergy(filter: SynergyFilter, order: SynergyOrder, first: Int, offset: Int): [Synergy]
	aggregateSynergy(filter: SynergyFilter): SynergyAggregateResult
}

#######################
# Generated Mutations
#######################

type Mutation {
	addMtgCard(input: [AddMtgCardInput!]!): AddMtgCardPayload
	updateMtgCard(input: UpdateMtgCardInput!): UpdateMtgCardPayload
	deleteMtgCard(filter: MtgCardFilter!): DeleteMtgCardPayload
	addSynergy(input: [AddSynergyInput!]!): AddSynergyPayload
	updateSynergy(input: UpdateSynergyInput!): UpdateSynergyPayload
	deleteSynergy(filter: SynergyFilter!): DeleteSynergyPayload
}

